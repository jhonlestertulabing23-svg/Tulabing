<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Typing Game - Keyboard Only</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      padding: 20px;
      background: linear-gradient(135deg, #1e3c72, #2a5298);
      color: #eee;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: flex-start;
    }

    #wordForm, #typingSection {
      margin-top: 20px;
      background: rgba(0,0,0,0.3);
      padding: 15px 25px;
      border-radius: 12px;
      box-shadow: 0 0 15px rgba(255, 255, 255, 0.1);
      width: 100%;
      max-width: 500px;
    }

    input, button {
      padding: 8px;
      margin: 5px;
      font-size: 1rem;
      border-radius: 6px;
      border: none;
      outline: none;
      transition: background-color 0.3s ease;
    }

    input {
      width: 60%;
      max-width: 250px;
      background: rgba(255,255,255,0.15);
      color: #eee;
      box-shadow: inset 0 0 8px rgba(255,255,255,0.2);
    }

    input::placeholder {
      color: #ccc;
    }

    input:focus {
      background: rgba(255,255,255,0.3);
      box-shadow: 0 0 8px 2px #a0c1ff;
      color: white;
    }

    button {
      background-color: #4a90e2;
      color: white;
      cursor: pointer;
      box-shadow: 0 4px 8px rgba(74, 144, 226, 0.4);
    }

    button:hover {
      background-color: #357ABD;
      box-shadow: 0 6px 12px rgba(53, 122, 189, 0.7);
    }

    #wordDisplay, #typedDisplay {
      font-size: 1.6rem;
      margin-top: 20px;
      font-weight: bold;
      text-align: center;
      text-shadow: 0 0 8px rgba(255, 255, 255, 0.7);
    }

    .log {
      margin-top: 10px;
      font-size: 1.1rem;
      text-align: center;
      min-height: 24px;
    }

    .correct {
      color: #7cff7c;
      text-shadow: 0 0 8px #7cff7c;
    }

    .incorrect {
      color: #ff6f6f;
      text-shadow: 0 0 8px #ff6f6f;
    }

    h1 {
      text-align: center;
      font-weight: 900;
      text-shadow: 0 0 12px #a0c1ff;
      margin-bottom: 10px;
      user-select: none;
    }

    #usedWordsList {
      margin-top: 10px;
      font-size: 1rem;
      color: #a0c1ff;
      min-height: 24px;
      text-align: center;
      user-select: none;
    }
  </style>
</head>
<body>

  <h1>Typing Game with Keyboard Only</h1>

  
  <div id="wordForm">
    <input type="text" id="wordInput" placeholder="Add word" />
    <button onclick="addWord()">Add Word</button>
    <button onclick="startGame()">Start</button>
    <p><strong>Word List:</strong> <span id="wordListDisplay"></span></p>
    <p id="usedWordsList"><strong>Used Words:</strong> None</p>
  </div>

  
  <div id="typingSection" style="display:none;">
    <p id="wordDisplay"></p>
    <p><strong>Your Typing:</strong> <span id="typedDisplay">[start typing]</span></p>
    <div id="throttleLog" class="log"></div>
    <div id="debounceLog" class="log"></div>
  </div>

  <script>
    
    function debounce(fn, delay) {
      let timer;
      return function (...args) {
        clearTimeout(timer);
        timer = setTimeout(() => fn.apply(this, args), delay);
      };
    }

    function throttle(fn, limit) {
      let lastCall = 0;
      return function (...args) {
        const now = Date.now();
        if (now - lastCall >= limit) {
          lastCall = now;
          fn.apply(this, args);
        }
      };
    }

    
    const wordInput = document.getElementById('wordInput');
    const wordListDisplay = document.getElementById('wordListDisplay');
    const wordDisplay = document.getElementById('wordDisplay');
    const typedDisplay = document.getElementById('typedDisplay');
    const throttleLog = document.getElementById('throttleLog');
    const debounceLog = document.getElementById('debounceLog');
    const usedWordsList = document.getElementById('usedWordsList');

    let words = [];
    let currentWord = '';
    let typedWord = '';
    let usedWords = [];

    
    function addWord() {
      const word = wordInput.value.trim();
      if (word) {
        words.push(word);
        wordListDisplay.textContent = words.join(', ');
        wordInput.value = '';
        wordInput.focus();
      }
    }

    
    function startGame() {
      if (words.length === 0) {
        alert("Please add at least one word to start the game.");
        return;
      }

      usedWords = []; 
      updateUsedWordsDisplay();

      document.getElementById('typingSection').style.display = 'block';
      showRandomWord();
      typedWord = '';
      updateTypedDisplay();
    }

   
    function showRandomWord() {
      const unusedWords = words.filter(w => !usedWords.includes(w));

      if (unusedWords.length === 0) {
       
        wordDisplay.textContent = "ðŸŽ‰ You've completed all words! Add more or restart.";
        debounceLog.textContent = '';
        throttleLog.textContent = '';
        typedDisplay.textContent = '[game over]';
        return;
      }

      const index = Math.floor(Math.random() * unusedWords.length);
      currentWord = unusedWords[index];
      usedWords.push(currentWord);

      wordDisplay.textContent = `Type this word: "${currentWord}"`;
      debounceLog.textContent = '';
      throttleLog.textContent = '';
      typedWord = '';
      updateTypedDisplay();
      updateUsedWordsDisplay();
    }

   
    function updateTypedDisplay() {
      typedDisplay.textContent = typedWord || '[start typing]';
    }

    
    function updateUsedWordsDisplay() {
      if (usedWords.length === 0) {
        usedWordsList.innerHTML = '<strong>Used Words:</strong> None';
      } else {
        usedWordsList.innerHTML = `<strong>Used Words:</strong> ${usedWords.join(', ')}`;
      }
    }

   
    function checkWord(typed) {
      if (typed === currentWord) {
        debounceLog.innerHTML = `<b class="correct">Correct!</b> You typed "${typed}".`;
        setTimeout(showRandomWord, 1000);
      } else {
        debounceLog.innerHTML = `<b class="incorrect">Incorrect!</b> You typed "${typed}".`;
      }
    }

   
    const handleThrottle = throttle(() => {
      throttleLog.innerHTML = `<b>Throttle:</b> Typing... "${typedWord}"`;
    }, 300);

    
    const handleDebounce = debounce(() => {
      checkWord(typedWord);
    }, 700);

    
    document.addEventListener('keydown', function (e) {
      if (document.activeElement === wordInput) return;

      if (e.key === 'Backspace') {
        typedWord = typedWord.slice(0, -1);
      } else if (e.key === 'Enter') {
        e.preventDefault();
        checkWord(typedWord);
      } else if (/^[a-zA-Z]$/.test(e.key)) {
        typedWord += e.key;
      } else {
        return;
      }

      updateTypedDisplay();
      handleThrottle();
      handleDebounce();
    });

    
    wordInput.addEventListener('keydown', function (e) {
      if (e.key === 'Enter') {
        e.preventDefault();
        addWord();
      }
    });
  </script>
</body>
</html>
